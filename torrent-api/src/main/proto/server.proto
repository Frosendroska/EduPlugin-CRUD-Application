syntax = "proto3";

package org.hse.torrent.services.api;

import "google/protobuf/empty.proto";

service ServerService {
  /* LIST -- список раздаваемых файлов */
  rpc getAllSharedFileMetadata (google.protobuf.Empty) returns (stream SharedFileMetadataResponse);
  /* SOURCES -- список клиентов, владеющих определенным файлов целиком или некоторыми его частями */
  rpc getSharedFileSeeds (GetSharedFileSeedsRequest) returns (stream GetSharedFileSeedResponse);
  /* UPLOAD -- публикация нового файла */
  rpc registerSharedFile (RegisterSharedFileRequest) returns (RegisterSharedFileResponse);
  /* UPDATE -- загрузка клиентом данных о раздаваемых файлах */
  rpc reportSeed (ReportSeedRequest) returns (google.protobuf.Empty);
}


/* LIST */
message SharedFileMetadataResponse {
  //    <count: Int> (<id: Int> <name: String> <size: Long>)*,
  int32  fileId = 2;  //идентификатор файла
  string name = 3; //название файла
  int64  sizeBytes = 4; //размер файла
}


/* SOURCES */
message GetSharedFileSeedsRequest {
  //    <3: Byte> <id: Int>,
  int32 fileId = 1;  //идентификатор файла
}


message GetSharedFileSeedResponse {
  //    <size: Int> (<ip: ByteByteByteByte> <clientPort: Short>)*,
  string ip = 1; //ip клиента,
  string port = 2; //порт клиента
}


/* UPLOAD */
message RegisterSharedFileRequest {
  //    <2: Byte> <name: String> <size: Long>,
  string name = 1; //название файла
  int64  sizeBytes = 2; //размер файла
}

message RegisterSharedFileResponse {
  //    <id: Int>,
  int32 fileId = 1;  //идентификатор файла
}


/* UPDATE */
message ReportSeedRequest {
  //    <4: Byte> <clientPort: Short> <count: Int> (<id: Int>)*,
  string ip = 1;
  string port = 2; //порт клиента,
  repeated int32 fileIds = 3; //идентификатор файла
}
